import java.nio.charset.CharacterCodingException;import java.util.ArrayList;import java.util.Collections;import java.util.Comparator;import java.util.Iterator;import java.util.LinkedHashMap;import java.util.Map;import java.util.Scanner;import java.util.Map.Entry;public class App {    public App() {    }    public static void main(String[] var0) {        System.out.println("Input a string");        Scanner keyboard = new Scanner(System.in);        String userInput = keyboard.nextLine();        if (userInput==null || userInput.length()==0){            System.out.println("Error - No input found. Press Enter to exit.");            keyboard.nextLine();            return ;        }        System.out.println();        LinkedHashMap map = processInputString(userInput);        Character firstNonRepeatingChar = findFirstNonRepeating(userInput, map);        if (firstNonRepeatingChar != null) {            System.out.println("The first non-repeating character is: " + firstNonRepeatingChar);        } else {            System.out.println("There is no non-repeating character in that input.");        }        System.out.println();        map = sortMap(map);        String finalString = composeFinalString(userInput,map);        System.out.println("The rewritten string is: ");        System.out.println(finalString);        System.out.println();        System.out.println();        System.out.println("Press Enter to Exit.");        keyboard.nextLine();        return ;    }    public static LinkedHashMap<Character, Integer> processInputString(String userInput) {        LinkedHashMap<Character, Integer> map = new LinkedHashMap();        int length = userInput.length();        for(int i = 0; i < length; ++i) {            Character character = userInput.charAt(i);            Character characterUppercase = Character.toUpperCase(character);            Character characterLowecase = Character.toLowerCase(character);            int count;            if (map.containsKey(character)) {                count = map.get(character);                count++;                map.put(character, count);                if (map.containsKey(characterUppercase) && characterUppercase != character) {                    count = map.get(characterUppercase);                    count++;                    map.put(characterUppercase, count);                }                if (map.containsKey(characterLowecase) && characterLowecase != character) {                    count = map.get(characterLowecase);                    count++;                    map.put(characterLowecase, count);                }            } else {                if (map.containsKey(characterUppercase) && characterUppercase != character) {                    count = map.get(characterUppercase);                    count++;                    map.put(characterUppercase, count);                } else {                    count = 1;                }                map.put(character, count);            }        }        return map;    }    public static Character findFirstNonRepeating(String userInput, LinkedHashMap<Character, Integer> map) {        Character character = null;        for(int i = 0; i < userInput.length(); ++i) {            character = userInput.charAt(i);            if (map.get(character) == 1) {                break;            }        }        return character;    }    public static LinkedHashMap<Character, Integer> sortMap(LinkedHashMap<Character, Integer> map) {        ArrayList entries = new ArrayList(map.entrySet());        Collections.sort(entries, new Comparator<Entry<Character, Integer>>() {            public int compare(Entry<Character, Integer> entry1, Entry<Character, Integer> entrt2) {                return (entry1.getValue()).compareTo(entrt2.getValue());            }        });        LinkedHashMap sortedMap = new LinkedHashMap();        Iterator it = entries.iterator();        while(it.hasNext()) {            Entry entry = (Entry)it.next();            sortedMap.put(entry.getKey(), entry.getValue());        }        return sortedMap;    }    public static String composeFinalString(String userInput, Map<Character, Integer> map) {        String finalString="";        Iterator it = map.entrySet().iterator();        while(it.hasNext()) {            Entry<Character, Integer> entry = (Entry)it.next();            int numberRepetitions = entry.getValue();            if (!finalString.contains(entry.getKey().toString())){                if (numberRepetitions > 1){                    finalString= finalString +getAllOccurrencesInOrder(userInput,entry.getKey(),numberRepetitions);                }else{                    finalString= finalString + entry.getKey();                }            }        }        return finalString;    }    public static String getAllOccurrencesInOrder(String userInput, Character characterToSearch, int repetitions){        Character temp;        String finalString;        StringBuilder builder = new StringBuilder();        int count=0;        for(int i = 0; i < userInput.length(); ++i) {            temp = userInput.charAt(i);            if (temp==Character.toUpperCase(characterToSearch) || temp==Character.toLowerCase(characterToSearch)) {                builder.append(temp);                count++;            }            if (count==repetitions){                break;            }        }        finalString= builder.toString();        return finalString;    }}