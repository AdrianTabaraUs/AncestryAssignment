import java.util.ArrayList;import java.util.Collections;import java.util.Comparator;import java.util.Iterator;import java.util.LinkedHashMap;import java.util.Map;import java.util.Scanner;import java.util.Map.Entry;public class App {    public App() {    }    public static void main(String[] var0) {        System.out.println("Input a string");        Scanner keyboard = new Scanner(System.in);        String userInput = keyboard.nextLine();        System.out.println();        LinkedHashMap map = processInputString(userInput, false);        Character firstNonRepeatingChar = findFirstNonRepeating(userInput, map);        if (firstNonRepeatingChar != null) {            System.out.println("The first character non-repeating is: " + firstNonRepeatingChar);        } else {            System.out.println("There is no non-repeating character in that input.");        }        System.out.println();        LinkedHashMap realMap = processInputString(userInput, true);        map = sortMap(map);        String finalString = composeFinalString(map, realMap);        System.out.println("The rewritten string is: ");        System.out.println(finalString);    }    public static LinkedHashMap<Character, Integer> processInputString(String userInput, boolean real) {        LinkedHashMap<Character, Integer> map = new LinkedHashMap();        int length = userInput.length();        for(int i = 0; i < length; ++i) {            Character character = userInput.charAt(i);            Character characterUppercase = Character.toUpperCase(character);            int count;            if (map.containsKey(character)) {                count = map.get(character);                count++;                map.put(character, count);                if (map.containsKey(characterUppercase) && characterUppercase != character && !real) {                    count = map.get(characterUppercase);                    count++;                    map.put(characterUppercase, count);                }            } else {                if (map.containsKey(characterUppercase) && characterUppercase != character && !real) {                    count = map.get(characterUppercase);                    count++;                    map.put(characterUppercase, count);                } else {                    count = 1;                }                map.put(character, count);            }        }        return map;    }    public static Character findFirstNonRepeating(String inputUser, LinkedHashMap<Character, Integer> map) {        Character character = null;        for(int i = 0; i < inputUser.length(); ++i) {            character = inputUser.charAt(i);            if (map.get(character) == 1) {                break;            }        }        return character;    }    public static LinkedHashMap<Character, Integer> sortMap(LinkedHashMap<Character, Integer> map) {        ArrayList entries = new ArrayList(map.entrySet());        Collections.sort(entries, new Comparator<Entry<Character, Integer>>() {            public int compare(Entry<Character, Integer> entry1, Entry<Character, Integer> entrt2) {                return (entry1.getValue()).compareTo(entrt2.getValue());            }        });        LinkedHashMap sortedMap = new LinkedHashMap();        Iterator it = entries.iterator();        while(it.hasNext()) {            Entry entry = (Entry)it.next();            sortedMap.put(entry.getKey(), entry.getValue());        }        return sortedMap;    }    public static String composeFinalString(Map<Character, Integer> map, LinkedHashMap<Character, Integer> realMap) {        String finalString;        StringBuilder builder = new StringBuilder();        Iterator it = map.entrySet().iterator();        while(it.hasNext()) {            Entry entry = (Entry)it.next();            int numberRepetitions = realMap.get(entry.getKey());            for(int i = 0; i < numberRepetitions; ++i) {                builder.append(entry.getKey());            }        }        finalString = builder.toString();        return finalString;    }}